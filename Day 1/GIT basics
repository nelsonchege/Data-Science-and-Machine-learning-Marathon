What is version control?

How version control helps high performing development and DevOps teams prosper
Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time. As development environments have accelerated, version control systems help software teams work faster and smarter. They are especially useful for DevOps teams since they help them to reduce development time and increase successful deployments.

Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.


What is Git?

By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and IDEs (Integrated Development Environments).

Having a distributed architecture, Git is an example of a DVCS (hence Distributed Version Control System). Rather than have only one single place for the full version history of the software as is common in once-popular version control systems like CVS or Subversion (also known as SVN), in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes.

In addition to being distributed, Git has been designed with performance, security and flexibility in mind

some basic git commands include:
   git init: Everything starts from here. The first step is to initialize a new Git repo locally in your project root. 
   git add filename_here :The command below will add a file to the staging area. Just replace filename_here with the name of the file you                             want to add to the staging area.
   git status: This command will show the status of the current repository including staged, unstaged, and untracked files.
   git commit: This command will open a text editor in the terminal where you can write a full commit message.
               A commit message is made up of a short summary of changes, an empty line, and a full description of the changes after it.
   git log: This command shows the commit history for the current repository: